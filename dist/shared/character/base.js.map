{"version":3,"sources":["base.js"],"names":["buildGrid","distanceTo","Vector2","sounds","astar","Character","constructor","x","y","attack","swish0","swish1","swish2","swish3","footstep","foot0","foot1","foot2","foot3","foot4","ouch","hit0","hit1","hit2","pos","setTeam","team","game","setRenderer","renderer","whoAmI","console","log","name","hp","movedThisRound","debugStr","selected","receiveDamage","damage","damageResist","audio","Audio","damageSound","play","targetCharacter","moveSprite","vec","copy","update","canReach","square","ourPos","distance","movement","search","canReachAttack","ourAtt","attackRange","influenceGrid","g","touchCell","influence","length","Math","max","min","influenceDiag","influencePos","getOpposingTeam"],"mappings":"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","sourcesContent":["import { buildGrid, distanceTo } from \"../gridutils\"\nimport { Vector2 } from \"three\"\nimport * as sounds from \"../../client/sounds\"\nimport astar from \"../astar\"\n\nexport default class Character {\n  name = \"Basic Character\"\n  shortCode = \"??\"\n  modelName = \"Skeleton.glb\"\n  hp = 5000\n  damage = 3000\n  movement = 5\n  attackRange = 5\n  attackName = \"Splash\"\n  sounds = {\n    attack: [sounds.swish0, sounds.swish1, sounds.swish2, sounds.swish3],\n    footstep: [sounds.foot0, sounds.foot1, sounds.foot2, sounds.foot3, sounds.foot4],\n    ouch: [sounds.hit0, sounds.hit1, sounds.hit2],\n  }\n  attackSound = \"sound\"\n  damageSound = \"sound\"\n  damageResist = -0.3\n  initiative = 2\n  points = 0\n  influencePos = 0\n  influenceDiag = 0\n  characterSelected = false\n  actionPoints = 2\n  movedThisRound = false\n  attackedThisRound = false\n  renderer = null\n\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n    this.pos = new Vector2(x, y)\n  }\n\n  setTeam(team) {\n    this.team = team\n    this.game = team.game\n  }\n\n  setRenderer(renderer) {\n    this.renderer = renderer\n  }\n\n  whoAmI() {\n    console.log(\n      this.name,\n      this.x,\n      this.y,\n      this.hp,\n      this.movedThisRound\n      // this.active,\n      // this.turn\n    )\n  }\n\n  debugStr() {\n    return this.constructor.name + \": \" + this.hp + \" hp \" + this.x + \",\" + this.y\n  }\n\n  selected() {\n    console.log(whoAmI)\n  }\n\n  receiveDamage(damage) {\n    this.hp -= damage - damage * this.damageResist\n    let audio = new Audio(this.damageSound)\n    audio.play()\n  }\n\n  attack(targetCharacter) {\n    console.log(\"attack\")\n    targetCharacter.receiveDamage(this.damage)\n    let audio = new Audio(this.damageSound)\n    audio.play()\n  }\n\n  moveSprite(vec) {\n    //vec\n    this.y = vec.y //vec.y\n    this.x = vec.x //vec.x\n    this.pos.copy(vec)\n    this.game.update()\n  }\n\n  canReach(square) {\n    const ourPos = { y: this.y, x: this.x }\n    //is distanceTo <= this.character.movement\n    let distance = distanceTo(square, ourPos)\n    if (distance <= this.movement) {\n      astar.search(buildGrid(), ourPos, square)\n    } else {\n      return false\n    }\n  }\n\n  canReachAttack(square) {\n    const ourAtt = { y: this.y, x: this.x }\n    let distance = distanceTo(square, ourAtt)\n    if (distance <= this.attackRange) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  influenceGrid(g) {\n    const touchCell = (x, y, influence) => {\n      if (x < 0 || y < 0 || x >= g.length || y >= g.length) {\n        // Outside of grid bounds\n        return\n      }\n\n      if (g[y][x] <= 0) {\n        // Non-Walkable OR has enemy on it\n        return\n      }\n\n      if (g[y][x] > 1) {\n        // Something else already influenced it, lower it to indicate danger\n        g[y][x] = Math.max(g[y][x], influence) - Math.min(g[y][x], influence)\n      } else if (g[y][x] < 1) {\n        // Cell has already been yoinked too many times, let it stay negative\n        g[y][x] = g[y][x] - influence\n      } else {\n        // Cell is at its default value, give it our influence\n        g[y][x] = influence\n      }\n    }\n\n    const x = this.x,\n      y = this.y\n\n    // Top row\n    touchCell(x - 1, y - 1, this.influenceDiag)\n    touchCell(x, y - 1, this.influencePos)\n    touchCell(x + 1, y - 1, this.influenceDiag)\n\n    // Our Row\n    touchCell(x - 1, y, this.influencePos)\n    g[y][x] = 0 // Set the cell we're standing on to 0\n    touchCell(x + 1, y, this.influencePos)\n\n    // Top row\n    touchCell(x - 1, y + 1, this.influenceDiag)\n    touchCell(x, y + 1, this.influencePos)\n    touchCell(x + 1, y + 1, this.influenceDiag)\n  }\n\n  getOpposingTeam() {\n    return this.team.getOpposingTeam()\n  }\n}\n"]}