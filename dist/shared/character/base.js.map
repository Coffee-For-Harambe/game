{"version":3,"sources":["base.js"],"names":["buildGrid","distanceTo","Vector2","sounds","computePath","Character","constructor","x","y","attack","swish0","swish1","swish2","swish3","footstep","foot0","foot1","foot2","foot3","foot4","ouch","hit0","hit1","hit2","idle","walk","damage","pos","setTeam","team","game","setRenderer","renderer","whoAmI","console","log","name","hp","movedThisRound","debugStr","selected","receiveDamage","damageResist","audio","length","Math","floor","random","setTimeout","play","targetCharacter","moveSprite","vec","copy","update","canReach","square","ourPos","distance","movement","path","canReachAttack","ourAtt","attackRange","influenceGrid","g","touchCell","influence","max","min","influenceDiag","influencePos","getOpposingTeam"],"mappings":"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","sourcesContent":["import { buildGrid, distanceTo } from \"../gridutils\"\nimport { Vector2 } from \"three\"\nimport * as sounds from \"../../client/sounds\"\nimport { computePath } from \"../astar\"\n\nexport default class Character {\n  name = \"Basic Character\"\n  shortCode = \"??\"\n  modelName = \"Skeleton.glb\"\n  hp = 5000\n  damage = 3000\n  movement = 5\n  attackRange = 5\n  attackName = \"Splash\"\n  sounds = {\n    attack: [sounds.swish0, sounds.swish1, sounds.swish2, sounds.swish3],\n    footstep: [sounds.foot0, sounds.foot1, sounds.foot2, sounds.foot3, sounds.foot4],\n    ouch: [sounds.hit0, sounds.hit1, sounds.hit2],\n  }\n\n  animations = {\n    idle: \"Idle\",\n    walk: \"Walk\",\n    damage: \"ReceiveHit\",\n    attack: \"Attack\",\n  }\n\n  damageResist = -0.3\n  initiative = 2\n  points = 0\n  influencePos = 0\n  influenceDiag = 0\n  characterSelected = false\n  actionPoints = 2\n  movedThisRound = false\n  attackedThisRound = false\n  renderer = null\n\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n    this.pos = new Vector2(x, y)\n  }\n\n  setTeam(team) {\n    this.team = team\n    this.game = team.game\n  }\n\n  setRenderer(renderer) {\n    this.renderer = renderer\n  }\n\n  whoAmI() {\n    console.log(\n      this.name,\n      this.x,\n      this.y,\n      this.hp,\n      this.movedThisRound\n      // this.active,\n      // this.turn\n    )\n  }\n\n  debugStr() {\n    return this.constructor.name + \": \" + this.hp + \" hp \" + this.x + \",\" + this.y\n  }\n\n  selected() {\n    console.log(whoAmI)\n  }\n\n  receiveDamage(damage) {\n    this.hp -= damage - damage * this.damageResist\n    let audio = this.sounds.ouch\n    if (audio.length) {\n      audio = audio[Math.floor(Math.random() * audio.length)]\n    }\n    setTimeout(() => audio.play(), 600)\n  }\n\n  attack(targetCharacter) {\n    console.log(\"attack\")\n    targetCharacter.receiveDamage(this.damage)\n    let audio = this.sounds.attack\n    if (audio.length) {\n      audio = audio[Math.floor(Math.random() * audio.length)]\n    }\n    audio.play()\n  }\n\n  moveSprite(vec) {\n    //vec\n    this.y = vec.y //vec.y\n    this.x = vec.x //vec.x\n    this.pos.copy(vec)\n    this.game.update()\n  }\n\n  canReach(square) {\n    const ourPos = { y: this.y, x: this.x }\n    //is distanceTo <= this.character.movement\n    let distance = distanceTo(square, ourPos)\n    if (distance <= this.movement) {\n      const path = computePath(ourPos, square)\n      if (path.length > 0 && path.length <= this.movement) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  canReachAttack(square) {\n    const ourAtt = { y: this.y, x: this.x }\n    let distance = distanceTo(square, ourAtt)\n    if (distance <= this.attackRange) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  influenceGrid(g) {\n    const touchCell = (x, y, influence) => {\n      if (x < 0 || y < 0 || x >= g.length || y >= g.length) {\n        // Outside of grid bounds\n        return\n      }\n\n      if (g[y][x] <= 0) {\n        // Non-Walkable OR has enemy on it\n        return\n      }\n\n      if (g[y][x] > 1) {\n        // Something else already influenced it, lower it to indicate danger\n        g[y][x] = Math.max(g[y][x], influence) - Math.min(g[y][x], influence)\n      } else if (g[y][x] < 1) {\n        // Cell has already been yoinked too many times, let it stay negative\n        g[y][x] = g[y][x] - influence\n      } else {\n        // Cell is at its default value, give it our influence\n        g[y][x] = influence\n      }\n    }\n\n    const x = this.x,\n      y = this.y\n\n    // Top row\n    touchCell(x - 1, y - 1, this.influenceDiag)\n    touchCell(x, y - 1, this.influencePos)\n    touchCell(x + 1, y - 1, this.influenceDiag)\n\n    // Our Row\n    touchCell(x - 1, y, this.influencePos)\n    g[y][x] = 0 // Set the cell we're standing on to 0\n    touchCell(x + 1, y, this.influencePos)\n\n    // Top row\n    touchCell(x - 1, y + 1, this.influenceDiag)\n    touchCell(x, y + 1, this.influencePos)\n    touchCell(x + 1, y + 1, this.influenceDiag)\n  }\n\n  getOpposingTeam() {\n    return this.team.getOpposingTeam()\n  }\n}\n"]}