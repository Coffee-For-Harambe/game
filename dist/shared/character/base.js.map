{"version":3,"sources":["base.js"],"names":["buildGrid","distanceTo","Vector2","sounds","computePath","Character","constructor","x","y","attack","swish0","swish1","swish2","swish3","footstep","foot0","foot1","foot2","foot3","foot4","ouch","hit0","hit1","hit2","idle","walk","damage","death","pos","setTeam","team","game","maxhealth","hp","setRenderer","renderer","Math","floor","random","maxDamage","minDamage","whoAmI","console","log","name","movedThisRound","debugStr","selected","receiveDamage","damageResist","audio","length","currentTime","play","model","playAnimation","animations","targetCharacter","i","attackCount","setTimeout","face","moveSprite","vec","copy","update","canReach","square","ourPos","distance","movement","path","canReachAttack","attackRange","influenceGrid","g","touchCell","influence","max","min","influenceDiag","influencePos","getOpposingTeam"],"mappings":"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","sourcesContent":["import { buildGrid, distanceTo } from \"../gridutils\"\nimport { Vector2 } from \"three\"\nimport * as sounds from \"../../client/sounds\"\nimport { computePath } from \"../astar\"\n\nexport default class Character {\n  name = \"Basic Character\"\n  shortCode = \"??\"\n  modelName = \"Skeleton.glb\"\n  hp = 5000\n  movement = 5\n  attackRange = 5\n  attackCount = 1\n  attackName = \"Splash\"\n  sounds = {\n    attack: [sounds.swish0, sounds.swish1, sounds.swish2, sounds.swish3],\n    footstep: [sounds.foot0, sounds.foot1, sounds.foot2, sounds.foot3, sounds.foot4],\n    ouch: [sounds.hit0, sounds.hit1, sounds.hit2],\n  }\n\n  animations = {\n    idle: \"Idle\",\n    walk: \"Walk\",\n    damage: \"RecieveHit\",\n    attack: \"Attack\",\n    death: \"Death\",\n  }\n\n  minDamage = 1000\n  maxDamage = 3000\n  damageResist = -0.3\n  initiative = 2\n  points = 0\n  influencePos = 0\n  influenceDiag = 0\n  characterSelected = false\n  actionPoints = 2\n  movedThisRound = false\n  attackedThisRound = false\n  renderer = null\n\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n    this.pos = new Vector2(x, y)\n  }\n\n  setTeam(team) {\n    this.team = team\n    this.game = team.game\n    this.maxhealth = this.hp\n  }\n\n  setRenderer(renderer) {\n    this.renderer = renderer\n  }\n\n  damage() {\n    return Math.floor(Math.random() * this.maxDamage + this.minDamage)\n  }\n\n  whoAmI() {\n    console.log(\n      this.name,\n      this.x,\n      this.y,\n      this.hp,\n      this.movedThisRound\n      // this.active,\n      // this.turn\n    )\n  }\n\n  debugStr() {\n    return this.constructor.name + \": \" + this.hp + \" hp \" + this.x + \",\" + this.y\n  }\n\n  selected() {\n    console.log(whoAmI)\n  }\n\n  receiveDamage(damage) {\n    this.hp -= damage - damage * this.damageResist\n    let audio = this.sounds.ouch\n    if (audio.length) {\n      audio = audio[Math.floor(Math.random() * audio.length)]\n    }\n    audio.currentTime = 0\n    audio.play()\n\n    if (this.model) {\n      this.model.playAnimation(this.animations.damage, true, false)\n    }\n  }\n\n  attack(targetCharacter) {\n    for (let i = 0; i < this.attackCount ?? 1; i++) {\n      setTimeout(() => {\n        setTimeout(() => {\n          targetCharacter.receiveDamage(this.damage())\n        }, 500 * i)\n\n        let audio = this.sounds.attack\n        if (audio.length) {\n          audio = audio[Math.floor(Math.random() * audio.length)]\n        }\n        audio.play()\n\n        if (this.model) {\n          this.model.face(targetCharacter.pos)\n          this.model.playAnimation(this.animations.attack, true, false)\n        }\n      }, 1.3 * 1000 * (i - 1))\n    }\n  }\n\n  moveSprite(vec) {\n    //vec\n    this.y = vec.y //vec.y\n    this.x = vec.x //vec.x\n    this.pos.copy(vec)\n    this.game.update()\n  }\n\n  canReach(square) {\n    const ourPos = { y: this.y, x: this.x }\n    //is distanceTo <= this.character.movement\n    let distance = distanceTo(square, ourPos)\n    if (distance <= this.movement) {\n      const path = computePath(ourPos, square)\n      if (path.length > 0 && path.length <= this.movement) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  canReachAttack(square) {\n    let distance = distanceTo(square, this.pos)\n    if (distance <= this.attackRange) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  influenceGrid(g) {\n    const touchCell = (x, y, influence) => {\n      if (x < 0 || y < 0 || x >= g.length || y >= g.length) {\n        // Outside of grid bounds\n        return\n      }\n\n      if (g[y][x] <= 0) {\n        // Non-Walkable OR has enemy on it\n        return\n      }\n\n      if (g[y][x] > 1) {\n        // Something else already influenced it, lower it to indicate danger\n        g[y][x] = Math.max(g[y][x], influence) - Math.min(g[y][x], influence)\n      } else if (g[y][x] < 1) {\n        // Cell has already been yoinked too many times, let it stay negative\n        g[y][x] = g[y][x] - influence\n      } else {\n        // Cell is at its default value, give it our influence\n        g[y][x] = influence\n      }\n    }\n\n    const x = this.x,\n      y = this.y\n\n    // Top row\n    touchCell(x - 1, y - 1, this.influenceDiag)\n    touchCell(x, y - 1, this.influencePos)\n    touchCell(x + 1, y - 1, this.influenceDiag)\n\n    // Our Row\n    touchCell(x - 1, y, this.influencePos)\n    g[y][x] = 0 // Set the cell we're standing on to 0\n    touchCell(x + 1, y, this.influencePos)\n\n    // Top row\n    touchCell(x - 1, y + 1, this.influenceDiag)\n    touchCell(x, y + 1, this.influencePos)\n    touchCell(x + 1, y + 1, this.influenceDiag)\n  }\n\n  getOpposingTeam() {\n    return this.team.getOpposingTeam()\n  }\n}\n"]}