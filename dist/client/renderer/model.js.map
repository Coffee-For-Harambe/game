{"version":3,"sources":["model.js"],"names":["Vector3","Vector2","AnimationMixer","AnimationClip","TextGeometry","Font","MeshBasicMaterial","Mesh","Color","Euler","Quaternion","GLTFLoader","gridToWorld","worldToGrid","WORLD_SCALE","WORLD_SCALE_V","Game","distanceTo","computePath","inspect","droidJSON","font","Model","constructor","src","scene","x","y","fullScene","pos","setWorldPos","loader","load","modelLoaded","bind","modelLoadProgress","modelLoadError","setPos","copy","mesh","position","updateMatrix","render","time","model","modelLoadedQueue","length","forEach","onModelLoaded","fn","push","children","layer","layers","set","scale","add","xhr","err","console","error","GridSquare","gridPos","state","Instance","selected","selectedCharacter","col","Colors","default","renderer","blockInput","material","color","start","dist","standingOnUs","characterGrid","turnStage","movement","walkable","attackRange","team","attackable","hovered","clone","multiplyScalar","enableCoordinates","coordinates","text","size","height","computeBoundingBox","centerOffsetX","boundingBox","max","min","centerOffsetZ","z","textMesh","rotation","Math","PI","originalColor","floor","random","highlighted","AnimatedModel","mixer","lastDraw","update","playAnimation","anim","stopAllAction","clip","findByName","animations","action","clipAction","play","log","animate","SquareHighlighter","lastPos","shouldShow","visible","square","CharacterModel","character","modelName","targetPos","movementQueue","movementSpeed","idle","lastCharacterPos","hp","shouldRemove","face","target","atan2","wantsTargetYaw","setFromEuler","equals","walk","shift","startingPos","yawStart","startingYaw","quaternion","targetYaw","elapsed","slerp","dot","movementStart","toMove","sub","startingGridPos"],"mappings":"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","sourcesContent":["import {\n  Vector3,\n  Vector2,\n  AnimationMixer,\n  AnimationClip,\n  TextGeometry,\n  Font,\n  MeshBasicMaterial,\n  Mesh,\n  Color,\n  Euler,\n  Quaternion,\n} from \"three\"\n\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\"\nimport { gridToWorld, worldToGrid, WORLD_SCALE, WORLD_SCALE_V } from \"./3dutils\"\nimport Game from \"../../shared/game\"\nimport { distanceTo } from \"../../shared/gridutils\"\nimport { computePath } from \"../../shared/astar\"\nimport { inspect } from \"../debugutils\"\n\nimport droidJSON from \"three/examples/fonts/droid/droid_sans_regular.typeface.json\"\nconst font = new Font(droidJSON)\n\nexport class Model {\n  constructor(src, scene, x, y, fullScene = false) {\n    this.pos = new Vector3()\n    this.setWorldPos(x, y)\n    this.src = src\n    this.scene = scene\n    this.fullScene = fullScene\n\n    this.loader = new GLTFLoader()\n\n    this.loader.load(\n      \"/3d/\" + src,\n      this.modelLoaded.bind(this),\n      this.modelLoadProgress.bind(this),\n      this.modelLoadError.bind(this)\n    )\n  }\n\n  setWorldPos(x, y) {\n    this.setPos(gridToWorld(x, y))\n  }\n\n  setPos(pos) {\n    this.pos.copy(pos)\n    if (this.mesh) {\n      this.mesh.position.copy(this.pos)\n      this.mesh.updateMatrix()\n    }\n  }\n\n  modelLoadedQueue = []\n  render(time) {\n    if (this.model && this.modelLoadedQueue.length > 0) {\n      this.modelLoadedQueue.forEach((x) => x())\n      this.modelLoadedQueue = []\n    }\n  }\n\n  onModelLoaded(fn) {\n    if (this.model) {\n      fn()\n    } else {\n      this.modelLoadedQueue.push(fn)\n    }\n  }\n\n  modelLoaded(model) {\n    this.model = model\n\n    if (this.fullScene) {\n      this.mesh = model.scene\n    } else {\n      this.mesh = model.scene.children[0]\n    }\n\n    if (this.layer) {\n      this.mesh.layers.set(this.layer)\n    }\n\n    model.model = this\n\n    this.mesh.model = this\n    this.mesh.scale.copy(WORLD_SCALE_V)\n\n    this.scene.add(this.mesh)\n    this.mesh.position.copy(this.pos)\n  }\n\n  modelLoadProgress(xhr) {\n    // console.log(\"Model\", this.src, (xhr.loaded / xhr.total) * 100 + \"% loaded\")\n  }\n\n  modelLoadError(err) {\n    console.error(\"Model couldn't load\", this.src, err)\n  }\n}\n\nexport class GridSquare extends Model {\n  constructor(scene, x, y) {\n    super(\"Floor_Modular.glb\", scene, x, y)\n    this.gridPos = { x, y }\n    this.setWorldPos(x, y)\n  }\n\n  layer = 1\n\n  static Colors = {\n    default: new Color(0.181, 0.181, 0.181),\n    walkable: new Color(0.044, 0.328, 0.638),\n    highlighted: new Color(0.348, 0.348, 0.348),\n    attackRange: new Color(0.147, 0, 0),\n    attackable: new Color(0.421, 0, 0),\n  }\n\n  setPos(pos) {\n    if (this.gridPos) {\n      pos.y = -(((this.gridPos.y % 2) + (this.gridPos.x % 2)) % 2) * 0.03\n    }\n    super.setPos(pos)\n  }\n\n  modelLoaded(model) {\n    super.modelLoaded(model)\n  }\n\n  render(time) {\n    const state = Game.Instance.state\n    const selected = state.selectedCharacter\n\n    let col = GridSquare.Colors.default\n    if (Game.Instance.renderer.blockInput) {\n      this.mesh.material.color.set(col)\n      return\n    }\n\n    if (selected) {\n      const start = selected.pos\n      const dist = distanceTo(start, this.gridPos)\n      const standingOnUs = Game.Instance.characterGrid[this.gridPos.y][this.gridPos.x]\n\n      if (\n        state.turnStage == \"Moving\" &&\n        dist <= selected.movement &&\n        (!standingOnUs || standingOnUs != selected)\n      ) {\n        col = GridSquare.Colors.walkable\n      } else if (state.turnStage == \"Attacking\" && dist <= selected.attackRange) {\n        if (standingOnUs) {\n          if (standingOnUs.team !== selected.team) {\n            col = GridSquare.Colors.attackable\n          }\n        } else {\n          col = GridSquare.Colors.attackRange\n        }\n      }\n    }\n\n    const hovered = Game.Instance.state.hovered\n    if (hovered && hovered.x == this.gridPos.x && hovered.y == this.gridPos.y) {\n      col = col.clone().multiplyScalar(1.35)\n    }\n    this.mesh.material.color.set(col)\n  }\n\n  enableCoordinates() {\n    if (!this.coordinates) {\n      const text = new TextGeometry(`(${this.gridPos.x}, ${this.gridPos.y})`, {\n        font,\n        size: WORLD_SCALE / 3,\n        height: 0.1,\n      })\n\n      text.computeBoundingBox()\n\n      const centerOffsetX = -0.5 * (text.boundingBox.max.x - text.boundingBox.min.x)\n\n      const centerOffsetZ = -0.5 * (text.boundingBox.max.z - text.boundingBox.min.z)\n\n      const textMesh = new Mesh(text, new MeshBasicMaterial({ color: 0xffffff }))\n\n      textMesh.position.x = this.pos.x + centerOffsetX\n      textMesh.position.y = this.pos.y + 0.5\n      textMesh.position.z = this.pos.z + centerOffsetZ\n\n      // textMesh.rotation.x = Math.Pi\n      textMesh.rotation.x = -Math.PI / 2\n\n      this.coordinates = textMesh\n      this.scene.add(textMesh)\n    }\n  }\n\n  modelLoaded(model) {\n    super.modelLoaded(model)\n    this.originalColor = this.mesh.material.color\n    this.mesh.rotation.set(0, ((Math.floor(Math.random() * 4) * 90) / 360) * Math.PI * 2, 0)\n  }\n}\n\nexport class AnimatedModel extends Model {\n  constructor(src, scene, x, y) {\n    super(src, scene, x, y)\n  }\n\n  modelLoaded(model) {\n    super.modelLoaded(model)\n    this.mixer = new AnimationMixer(this.mesh)\n  }\n\n  lastDraw = 0\n  render(time) {\n    super.render(time)\n    if (this.lastDraw == 0) {\n      this.lastDraw = time\n    }\n\n    this.mixer.update((time - this.lastDraw) / 1000)\n    this.lastDraw = time\n  }\n\n  playAnimation(anim) {\n    this.lastDraw = 0\n    this.mixer.stopAllAction()\n\n    const clip = AnimationClip.findByName(this.model.animations, anim)\n    if (clip) {\n      this.action = this.mixer.clipAction(clip)\n      this.action.play()\n    } else {\n      console.log(\"Animation not found on model:\", anim, this.src)\n    }\n  }\n\n  animate(time) {\n    return false\n  }\n}\n\nexport class SquareHighlighter extends AnimatedModel {\n  constructor(scene) {\n    super(\"Swoosh.glb\", scene, 0, 0)\n    this.lastPos = null\n    this.shouldShow = false\n  }\n\n  modelLoaded(model) {\n    super.modelLoaded(model)\n    this.mesh.visible = false\n  }\n\n  render(time) {\n    super.render(time)\n\n    const square = Game.Instance.state.selectedCharacter?.pos\n    if (square != this.lastPos) {\n      this.playAnimation(\"Swoosh\")\n      this.lastPos = square\n      if (square) {\n        this.setWorldPos(square.x, square.y)\n        this.shouldShow = true\n      } else {\n        this.shouldShow = false\n      }\n    }\n\n    this.mesh.visible = this.shouldShow && !Game.Instance.renderer.blockInput\n  }\n}\n\nexport class CharacterModel extends AnimatedModel {\n  constructor(character, scene) {\n    super(character.modelName, scene, 0, 0)\n    this.character = character\n    character.model = this\n\n    // this.lastCharacterPos = new Vector2(0, 0)\n    this.targetPos = null\n\n    this.movementQueue = []\n\n    this.movementSpeed = 0.7\n  }\n\n  modelLoaded(model) {\n    super.modelLoaded(model)\n    this.playAnimation(this.character.animations.idle)\n    if (this.character.pos.y > 7) {\n      this.mesh.rotation.set(0, Math.PI, 0)\n    }\n\n    this.setPos(gridToWorld(this.character.x, this.character.y))\n    this.lastCharacterPos = this.character.pos.clone()\n  }\n\n  render(time) {\n    super.render(time)\n\n    if (this.character.hp < 0) {\n      // AND NOT IS PLAYING DYING ANIMATION\n      this.shouldRemove = true\n    }\n  }\n\n  face(square) {\n    const pos = worldToGrid(this.pos)\n    let target = Math.atan2(square.x - pos.x, square.y - pos.y)\n    this.wantsTargetYaw = new Quaternion().setFromEuler(new Euler(0, target, 0))\n  }\n\n  animate(time) {\n    super.animate(time)\n    if (!this.lastCharacterPos) {\n      return\n    }\n\n    if (!this.character.pos.equals(this.lastCharacterPos)) {\n      inspect(this)\n      this.playAnimation(this.character.animations.walk)\n      this.movementQueue = computePath(\n        this.lastCharacterPos.clone(),\n        this.character.pos.clone(),\n        this.character\n      )\n      this.lastCharacterPos = this.character.pos.clone()\n      // Replace with character.calculatePath\n    }\n\n    if (!this.targetPos && this.movementQueue.length) {\n      const pos = this.movementQueue.shift()\n      this.targetPos = gridToWorld(pos.x, pos.y)\n      this.startingPos = this.pos.clone()\n      this.face(pos)\n    }\n\n    if (this.wantsTargetYaw) {\n      this.yawStart = time\n      this.startingYaw = this.mesh.quaternion.clone()\n      this.targetYaw = this.wantsTargetYaw\n\n      this.wantsTargetYaw = null\n    }\n\n    if (this.targetYaw) {\n      const elapsed = Math.min(1, (time - this.yawStart) / 1000 / (this.movementSpeed / 2))\n\n      this.mesh.quaternion.copy(this.startingYaw)\n      this.mesh.quaternion.slerp(this.targetYaw, elapsed)\n\n      if (elapsed == 1 || this.mesh.quaternion.dot(this.targetYaw) > 0.999) {\n        this.targetYaw = null\n        this.yawStart = null\n      } else {\n        return true\n      }\n    }\n\n    if (this.targetPos) {\n      if (!this.movementStart) {\n        this.movementStart = time\n      }\n\n      const elapsed = Math.min(1, (time - this.movementStart) / 1000 / this.movementSpeed)\n      const toMove = this.targetPos.clone().sub(this.startingPos.clone()).multiplyScalar(elapsed)\n      this.setPos(toMove.add(this.startingPos))\n\n      if (elapsed == 1) {\n        this.targetPos = null\n        this.movementStart = null\n        this.startingGridPos = null\n\n        if (!this.movementQueue.length) {\n          this.playAnimation(this.character.animations.idle)\n        }\n      }\n\n      return true\n    }\n\n    return false\n  }\n}\n"]}